{
  global:
    extern "C++" {
        UpdateTraceLabel;
        SetTraceDisabled;
        StartTrace;
        StartTraceEx;
        StartTraceDebug;
        StartTraceArgs;
        StartTraceArgsDebug;
        StartTraceWrapper;
        FinishTrace;
        FinishTraceEx;
        FinishTraceDebug;
        StartAsyncTrace;
        StartAsyncTraceEx;
        StartAsyncTraceDebug;
        StartAsyncTraceArgs;
        StartAsyncTraceArgsDebug;
        StartAsyncTraceWrapper;
        StartTraceChain;
        FinishAsyncTrace;
        FinishAsyncTraceEx;
        FinishAsyncTraceDebug;
        FinishAsyncTraceArgs;
        FinishAsyncTraceArgsDebug;
        FinishAsyncTraceWrapper;
        MiddleTrace;
        MiddleTraceDebug;
        CountTrace;
        CountTraceEx;
        CountTraceDebug;
        CountTraceWrapper;
        IsTagEnabled;
        StartCaptureAppTrace;
        StopCaptureAppTrace;
        "OHOS::HiviewDFX::Hitrace::GetTraceMode()";
        "OHOS::HiviewDFX::Hitrace::OpenTrace(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "OHOS::HiviewDFX::Hitrace::OpenTrace(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>> const&)";
        "OHOS::HiviewDFX::Hitrace::DumpTrace(int, unsigned long)";
        "OHOS::HiviewDFX::Hitrace::DumpTrace(int, unsigned long long)";
        "OHOS::HiviewDFX::Hitrace::RecordTraceOn()";
        "OHOS::HiviewDFX::Hitrace::RecordTraceOff()";
        "OHOS::HiviewDFX::Hitrace::CacheTraceOn(unsigned long, unsigned long)";
        "OHOS::HiviewDFX::Hitrace::CacheTraceOn(unsigned long long, unsigned long long)";
        "OHOS::HiviewDFX::Hitrace::CacheTraceOff()";
        "OHOS::HiviewDFX::Hitrace::CloseTrace()";
        "OHOS::HiviewDFX::Hitrace::GetTraceFilesTable()";
        "OHOS::HiviewDFX::Hitrace::SetTraceFilesTable(std::__h::vector<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, int>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, int>>>&)";
        "OHOS::HiviewDFX::Hitrace::SetTraceStatus(bool)";
        "HitraceScoped::HitraceScoped(unsigned long, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "HitraceScoped::HitraceScoped(unsigned long long, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "HitraceScoped::~HitraceScoped()";
        "HitracePerfScoped::HitracePerfScoped(bool, unsigned long, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "HitracePerfScoped::HitracePerfScoped(bool, unsigned long long, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "HitracePerfScoped::~HitracePerfScoped()";
        "HitraceMeterFmtScoped::HitraceMeterFmtScoped(unsigned long, char const*, ...)";
        "HitraceMeterFmtScoped::HitraceMeterFmtScoped(unsigned long long, char const*, ...)";
        "HitraceMeterFmtScoped::~HitraceMeterFmtScoped()";
        "HitraceMeterFmtScopedEx::HitraceMeterFmtScopedEx(HiTraceOutputLevel, unsigned long, char const*, char const*, ...)";
        "HitraceMeterFmtScopedEx::HitraceMeterFmtScopedEx(HiTraceOutputLevel, unsigned long long, char const*, char const*, ...)";
        "HitraceMeterFmtScopedEx::~HitraceMeterFmtScopedEx()";
        "OHOS::HiviewDFX::Hitrace::SetFilterAppName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
        "OHOS::HiviewDFX::Hitrace::AddFilterPid(int)";
        "OHOS::HiviewDFX::Hitrace::ClearFilterPid()";
        "OHOS::HiviewDFX::Hitrace::FilterAppTrace(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int)";
        "OHOS::HiviewDFX::Hitrace::AddFilterPids(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>> const&)";
    };
    extern "C" {
        "HiTraceStartTrace";
        "HiTraceFinishTrace";
        "HiTraceStartAsyncTrace";
        "HiTraceFinishAsyncTrace";
        "HiTraceCountTrace";
        "StartTraceCwrapper";
        "FinishTraceCwrapper";
        "StartAsyncTraceCwrapper";
        "FinishAsyncTraceCwrapper";
        "CountTraceCwrapper";
        "StartTraceChainPoint";
        "HiTraceStartTraceEx";
        "HiTraceFinishTraceEx";
        "HiTraceStartAsyncTraceEx";
        "HiTraceFinishAsyncTraceEx";
        "HiTraceCountTraceEx";
        "HiTraceIsTagEnabled";
        "StartTraceExCwrapper";
        "FinishTraceExCwrapper";
        "StartAsyncTraceExCwrapper";
        "FinishAsyncTraceExCwrapper";
        "CountTraceExCwrapper";
        "IsTagEnabledCwrapper";
        "FilterAppTrace";
    };
  local:
    *;
};